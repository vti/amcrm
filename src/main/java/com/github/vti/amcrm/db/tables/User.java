/*
 * This file is generated by jOOQ.
 */
package com.github.vti.amcrm.db.tables;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.github.vti.amcrm.db.DefaultSchema;
import com.github.vti.amcrm.db.Keys;
import com.github.vti.amcrm.db.tables.records.UserRecord;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class User extends TableImpl<UserRecord> {

    private static final long serialVersionUID = 1L;

    /** The reference instance of <code>user</code> */
    public static final User USER = new User();

    /** The class holding records for this type */
    @Override
    public Class<UserRecord> getRecordType() {
        return UserRecord.class;
    }

    /** The column <code>user.id</code>. */
    public final TableField<UserRecord, String> ID =
            createField(DSL.name("id"), SQLDataType.CLOB, this, "");

    /** The column <code>user.version</code>. */
    public final TableField<UserRecord, Long> VERSION =
            createField(DSL.name("version"), SQLDataType.BIGINT.nullable(false), this, "");

    /** The column <code>user.name</code>. */
    public final TableField<UserRecord, String> NAME =
            createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /** The column <code>user.is_admin</code>. */
    public final TableField<UserRecord, Boolean> IS_ADMIN =
            createField(DSL.name("is_admin"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /** The column <code>user.created_at</code>. */
    public final TableField<UserRecord, LocalDateTime> CREATED_AT =
            createField(
                    DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /** The column <code>user.created_by</code>. */
    public final TableField<UserRecord, String> CREATED_BY =
            createField(DSL.name("created_by"), SQLDataType.CLOB.nullable(false), this, "");

    /** The column <code>user.updated_at</code>. */
    public final TableField<UserRecord, LocalDateTime> UPDATED_AT =
            createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /** The column <code>user.updated_by</code>. */
    public final TableField<UserRecord, String> UPDATED_BY =
            createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    /** The column <code>user.deleted_at</code>. */
    public final TableField<UserRecord, LocalDateTime> DELETED_AT =
            createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /** The column <code>user.deleted_by</code>. */
    public final TableField<UserRecord, String> DELETED_BY =
            createField(DSL.name("deleted_by"), SQLDataType.CLOB, this, "");

    private User(Name alias, Table<UserRecord> aliased) {
        this(alias, aliased, null);
    }

    private User(Name alias, Table<UserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /** Create an aliased <code>user</code> table reference */
    public User(String alias) {
        this(DSL.name(alias), USER);
    }

    /** Create an aliased <code>user</code> table reference */
    public User(Name alias) {
        this(alias, USER);
    }

    /** Create a <code>user</code> table reference */
    public User() {
        this(DSL.name("user"), null);
    }

    public <O extends Record> User(Table<O> child, ForeignKey<O, UserRecord> key) {
        super(child, key, USER);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<UserRecord> getPrimaryKey() {
        return Keys.PK_USER;
    }

    @Override
    public List<UniqueKey<UserRecord>> getKeys() {
        return Arrays.<UniqueKey<UserRecord>>asList(Keys.PK_USER, Keys.SQLITE_AUTOINDEX_USER_2);
    }

    @Override
    public User as(String alias) {
        return new User(DSL.name(alias), this);
    }

    @Override
    public User as(Name alias) {
        return new User(alias, this);
    }

    /** Rename this table */
    @Override
    public User rename(String name) {
        return new User(DSL.name(name), null);
    }

    /** Rename this table */
    @Override
    public User rename(Name name) {
        return new User(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<
                    String,
                    Long,
                    String,
                    Boolean,
                    LocalDateTime,
                    String,
                    LocalDateTime,
                    String,
                    LocalDateTime,
                    String>
            fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
