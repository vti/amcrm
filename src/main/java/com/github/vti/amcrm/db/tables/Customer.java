/*
 * This file is generated by jOOQ.
 */
package com.github.vti.amcrm.db.tables;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.github.vti.amcrm.db.DefaultSchema;
import com.github.vti.amcrm.db.Keys;
import com.github.vti.amcrm.db.tables.records.CustomerRecord;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Customer extends TableImpl<CustomerRecord> {

    private static final long serialVersionUID = 1L;

    /** The reference instance of <code>customer</code> */
    public static final Customer CUSTOMER = new Customer();

    /** The class holding records for this type */
    @Override
    public Class<CustomerRecord> getRecordType() {
        return CustomerRecord.class;
    }

    /** The column <code>customer.id</code>. */
    public final TableField<CustomerRecord, String> ID =
            createField(DSL.name("id"), SQLDataType.CLOB, this, "");

    /** The column <code>customer.version</code>. */
    public final TableField<CustomerRecord, Long> VERSION =
            createField(DSL.name("version"), SQLDataType.BIGINT.nullable(false), this, "");

    /** The column <code>customer.name</code>. */
    public final TableField<CustomerRecord, String> NAME =
            createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /** The column <code>customer.surname</code>. */
    public final TableField<CustomerRecord, String> SURNAME =
            createField(DSL.name("surname"), SQLDataType.CLOB.nullable(false), this, "");

    /** The column <code>customer.photo_location</code>. */
    public final TableField<CustomerRecord, String> PHOTO_LOCATION =
            createField(DSL.name("photo_location"), SQLDataType.CLOB, this, "");

    /** The column <code>customer.created_at</code>. */
    public final TableField<CustomerRecord, LocalDateTime> CREATED_AT =
            createField(
                    DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /** The column <code>customer.created_by</code>. */
    public final TableField<CustomerRecord, String> CREATED_BY =
            createField(DSL.name("created_by"), SQLDataType.CLOB.nullable(false), this, "");

    /** The column <code>customer.updated_at</code>. */
    public final TableField<CustomerRecord, LocalDateTime> UPDATED_AT =
            createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /** The column <code>customer.updated_by</code>. */
    public final TableField<CustomerRecord, String> UPDATED_BY =
            createField(DSL.name("updated_by"), SQLDataType.CLOB, this, "");

    /** The column <code>customer.deleted_at</code>. */
    public final TableField<CustomerRecord, LocalDateTime> DELETED_AT =
            createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /** The column <code>customer.deleted_by</code>. */
    public final TableField<CustomerRecord, String> DELETED_BY =
            createField(DSL.name("deleted_by"), SQLDataType.CLOB, this, "");

    private Customer(Name alias, Table<CustomerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Customer(Name alias, Table<CustomerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /** Create an aliased <code>customer</code> table reference */
    public Customer(String alias) {
        this(DSL.name(alias), CUSTOMER);
    }

    /** Create an aliased <code>customer</code> table reference */
    public Customer(Name alias) {
        this(alias, CUSTOMER);
    }

    /** Create a <code>customer</code> table reference */
    public Customer() {
        this(DSL.name("customer"), null);
    }

    public <O extends Record> Customer(Table<O> child, ForeignKey<O, CustomerRecord> key) {
        super(child, key, CUSTOMER);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<CustomerRecord> getPrimaryKey() {
        return Keys.PK_CUSTOMER;
    }

    @Override
    public List<UniqueKey<CustomerRecord>> getKeys() {
        return Arrays.<UniqueKey<CustomerRecord>>asList(Keys.PK_CUSTOMER);
    }

    @Override
    public Customer as(String alias) {
        return new Customer(DSL.name(alias), this);
    }

    @Override
    public Customer as(Name alias) {
        return new Customer(alias, this);
    }

    /** Rename this table */
    @Override
    public Customer rename(String name) {
        return new Customer(DSL.name(name), null);
    }

    /** Rename this table */
    @Override
    public Customer rename(Name name) {
        return new Customer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<
                    String,
                    Long,
                    String,
                    String,
                    String,
                    LocalDateTime,
                    String,
                    LocalDateTime,
                    String,
                    LocalDateTime,
                    String>
            fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
