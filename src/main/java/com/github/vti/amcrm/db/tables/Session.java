/*
 * This file is generated by jOOQ.
 */
package com.github.vti.amcrm.db.tables;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import com.github.vti.amcrm.db.DefaultSchema;
import com.github.vti.amcrm.db.Keys;
import com.github.vti.amcrm.db.tables.records.SessionRecord;

/** This class is generated by jOOQ. */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Session extends TableImpl<SessionRecord> {

    private static final long serialVersionUID = 1L;

    /** The reference instance of <code>session</code> */
    public static final Session SESSION = new Session();

    /** The class holding records for this type */
    @Override
    public Class<SessionRecord> getRecordType() {
        return SessionRecord.class;
    }

    /** The column <code>session.id</code>. */
    public final TableField<SessionRecord, String> ID =
            createField(DSL.name("id"), SQLDataType.CLOB, this, "");

    /** The column <code>session.user_id</code>. */
    public final TableField<SessionRecord, String> USER_ID =
            createField(DSL.name("user_id"), SQLDataType.CLOB.nullable(false), this, "");

    /** The column <code>session.created_at</code>. */
    public final TableField<SessionRecord, LocalDateTime> CREATED_AT =
            createField(
                    DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /** The column <code>session.expires_at</code>. */
    public final TableField<SessionRecord, LocalDateTime> EXPIRES_AT =
            createField(
                    DSL.name("expires_at"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    private Session(Name alias, Table<SessionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Session(Name alias, Table<SessionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /** Create an aliased <code>session</code> table reference */
    public Session(String alias) {
        this(DSL.name(alias), SESSION);
    }

    /** Create an aliased <code>session</code> table reference */
    public Session(Name alias) {
        this(alias, SESSION);
    }

    /** Create a <code>session</code> table reference */
    public Session() {
        this(DSL.name("session"), null);
    }

    public <O extends Record> Session(Table<O> child, ForeignKey<O, SessionRecord> key) {
        super(child, key, SESSION);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<SessionRecord> getPrimaryKey() {
        return Keys.PK_SESSION;
    }

    @Override
    public List<UniqueKey<SessionRecord>> getKeys() {
        return Arrays.<UniqueKey<SessionRecord>>asList(Keys.PK_SESSION);
    }

    @Override
    public Session as(String alias) {
        return new Session(DSL.name(alias), this);
    }

    @Override
    public Session as(Name alias) {
        return new Session(alias, this);
    }

    /** Rename this table */
    @Override
    public Session rename(String name) {
        return new Session(DSL.name(name), null);
    }

    /** Rename this table */
    @Override
    public Session rename(Name name) {
        return new Session(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
